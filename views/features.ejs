<h1>Features</h1>

<h3 class="neon-feature"><i class="icon icon-building"></i> <i class="icon icon-hospital"></i> <span>Convenient DSL for creating classes</span></h3>

<p>The syntax for creating classes is very similar with that of other OO
languages.</p>

<%= Cd.printCode( function(){ %>
```javascript
Class(NameSpace, 'ClassName')({
    classProperty : 'value',
    prototype : {
        init : function( initParams ) { ... },
        instanceMethod : function() { ... }
    }
});

var myInstance = new ClassName( initParams );

```
<% }) %>

<h3 class="neon-feature"><i class="icon icon-sitemap"></i> <span>Inheritance</span></h3>

<p>Inheritance is pretty much the reason to use OO, so it provides a nice way of
subclassing. In esence, it's about extending javascript objects with the
properties of the base class.</p>

<%= Cd.printCode( function(){ %>
```javascript
Class(NameSpace, 'SubClass').inherits(NameSpace.SuperClass)({
    prototype : {
        init : function( initParams ) { ... } // overwrite SuperClass
    }
});

```
<% }) %>

<h3 class="neon-feature"> <i class="icon icon-puzzle-piece"></i> <span>Modules (composition)</span></h3>

<p>You can include modules or mixins in your classes. You can extend multiple
modules in a single class.</p>

<%= Cd.printCode( function(){ %>
```javascript
Module('MyModule')({
    prototype : {
        instanceProperty : false,
        instanceMethod : function() { ... }
    }
});

Class('MyClass').includes(MyModule)({
    prototype : {
        init : function( initParams ) { ... } // overwrite SuperClass
    }
});

var myInstance = new ClassName( initParams );
myInstance.instanceMethod();

```
<% }) %>
